纯理论：面试中有很多问题都会在这个里面讲到

一、NoSQL入门概述
什么是NOSQL
NoSQL====Not Only Sql意思是不仅仅是SQL，泛指非关系型数据库。
这些数据的类型存储不需要固定模式，无需多余操作就可以横向扩展

1GB=1024MB
1TB=1024GB
1PB=1024TB

facebook一天的数据量2PB+
哪台电脑的硬盘会有2PB？


select c.*,s.* from classmate c
inner join student s on c.cid=s.cid




为什么用nosql？
瓶颈: a:数据一台存储不下
      b:索引一台存储不下
      c:访问量（读写混合）一台无法承受
发展过程：1.单机mysql的时代
	  2.Memcached（类似EHCache）+mysql垂直拆分（不同的表进不同的库）
	  3.mysql主从复制,读写分离
	  4.分表分库+水平拆分（相同的表进不同的库）集群
	  5.mysql自身的瓶颈（大段文字，大图片等需要提取出来单独存放）



分布式与集群概念的简介
简单来讲：
1、分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。

2、集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。

结论：我们平时在网上查询的商品信息并不是来源于1个数据库
而是从多个数据库中分别查询出信息，最后合并成一条信息给用户展示
（后面所对应的技术有集群，分布式，拆分表的列存储）


随着发展，用户的数据如个人信息，社交网络，地理位置以及用户生成的数据与操作日志等
成倍增加。如果要对这些数据进行挖掘，SQL数据库已经不适合了，NOSQL却能很好解决这些问题



优势对比：
性能：1秒写大约8W次，读大约11W次
缓存：数据库表更新，缓存就失效
扩展：增删字段很麻烦，尤其是表中已有大量数据
RDBMS:高度组织化结构化数据，结构化查询语言，数据与关系都存在独立的表中
	严格的一致性，基础事务管理

NoSQL：无声明性的查询语言，无预定义的模式，键值对存储，列存储，文档存储
	图形数据库，最终一致性而非ACID属性，非结构化和不可预知的数据
	CAP+BASE定理，高性能高可用性和可伸缩性
Memcached（专注高速缓存）
Redis或者Tair（可用干多个事情KV,CACHE,Persistence）
MongDB（文档数据库）


有5个人（A,B,C,D,E），他们的关系如下：（这里只有人这个对象）
A是B的父亲
B是C和D的现实朋友
B和E是同事+朋友
C是E的表哥
C和D是夫妻关系
A是D的叔叔
A关注B,C,D
B关注C,D,E
A和B,C,D,E都是QQ还有
B,C,D是钉钉朋友
B,C,E在一个群里面



当前互联网（3V+3高）
3V：海量Volume，多样Variety，实时Velocity（问题）
3高：高并发，高可扩（横向），高性能（解决）


案例:当下的应用是sql与nosql一起使用


阿里巴巴网站架构发展历程
1999			perl，cgi（通用网关接口），oracle
2000			java，servlet
2001-2004		EJB
2005-2007		spring+ibatis+webx（strust2+webwork）
			isearch，mq+esb，数据挖掘
2008-2009		memcache集群，mysql+数据切分=cobar，
			分布式存储，Hadoop，KV，CDN
2010			安全，镜像（灾备），应用服务器升级，秒杀，nosql，SSD（性能）
2011第7代网站架构	敏捷（每天大量小需求），开放（第三方），体验(VR,AR)



与我们相关的是多数据源与多数据类型存储
（文字，点赞，评论，图片，VCR，关键字等）

阿里巴巴中文站商品信息如何存放？
1：商品基本信息(趋冷)（名称，价格，生产厂商等是否经常变动？）
2：商品描述，详情，评价信息（多文字类）
3：商品图片与VCR等
4：商品关键字
5：商品波段性的热点高频信息
6：商品的交易，价格计算，积分累计等


1:关系型数据库（王坚的去I[IBM小型机]O[Oracle数据库]E[EMC存储设备]，
		淘宝内部用的MySql是大牛自己改造的[尤其是引擎]）
2:文档类数据库（MongDB）
3:分布式的文件系统中（Hadoop的HDFS，淘宝自己的TFS，Google的GFS）
4:淘宝内部的搜索引擎（ISearch）
5:内存数据库（Tair，Redis，memcache）
6:外部系统，第三方支付接口，支付宝等



问题：多数据源如果某个数据源出了问题怎么办？
      一个程序要面对这么多接口要升级维护怎么办？
      这个人需要多牛才能干活？




阿里淘宝解决方式（UDSL）
统一数据服务层 UDSL
为了解决多数据源多数据的问题，以及各种数据库之前不同映射的问题。
淘宝建立了一个 UDSL，也就是在网站应用集群和底层数据源之间，
建立了一层代理。

三个特点：
完成各种数据库之间的映射
统一 API
热点缓存



================================================================

NoSQL数据模型介绍
案例：请设计一个电商客户，订单，订单明细，收货地址，支付模型
关系型数据库设计模型：我们要建立表，有字段，有关系等等
NoSQL设计模型：我们可以使用类似于一个BSON格式的字符串就能很好的说明
非常复杂的关系


原则与结论：
1.高并发操作是不太建议有关联查询的
2.互联网公司使用数据冗余来避免查询关联
3.分布式事务是支持不来太多并发的


NoSQL数据模型统称为聚合模型
1，KV键值对
2，BSON
3，列族(簇)
4，图
我们可以简单的认为就是关系型数据库中的varchar，int等类型


id name age sex  tel    sal    addr
1  aa   20  nan		8888		 1	name   aa
2  bb   24  nv		      changsha		age    20
3  cc   22  nan	 13999				sex    nan
						sal    8888
					 2	name   bb
						age    24
						sex    nv
						addr   changsha
						order  500
					 3	name   cc
						age    22
						sex    nan
						tel    139999
					 4      type   shouji
					        price  2000
						brand  huawei
				         5      name   xiaohua
					        type   京巴
						color  white

NoSQL数据库的四大分类
1：KV键值
新浪：BerkelayDB+redis
美团：redis+tair
百度：memcache+redis
2：文档型数据库（BSON格式比较多）
CouchDB，MongoDB（是一个基于分布式文件存储的数据库，介于关系与非关系之间的）
3：列存储数据库
Cassandra，HBase（分布式文件系统）
4：图关系数据库（不是放图片的）
放的是关系，例如：朋友圈社交网络，广告推荐系统，社交网络等
专注于构建关系图谱
Neo4J，InfoGrid
5：四种的对比



分布式数据库中CAP原理CAP+BASE
1.关系型数据库的ACID原则：
	A (Atomicity) 原子性
	C (Consistency) 一致性
	I (Isolation) 独立（隔离）性
	D (Durability) 持（永）久性



2.NoSQL的CAP
C （Consistency）强一致性（所见即所有） 
A （Availability）高可用性（支持高并发同时不能死） 
P （Partition）分布式容忍性

3.CAP的3进2（AP）
CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，
可用性和分区容错性这三个需求，

最多只能同时较好的满足两个。

因此，根据 CAP 原理将 NoSQL 
数据库分成了满足 CA 原则、
满足 CP 原则和满足 AP 原则三 大类：

CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。

CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。

AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。


注意：分布式架构的时候必须做出取舍。
一致性和可用性之间取一个平衡。绝大多数web应用，其实并不需要强一致性。
因此牺牲C换取P，这是目前分布式数据库产品的方向




一致性与可用性的决择
对于web2.0网站来说，关系型数据库的很多主要特性却往往无用武之地

数据库事务一致性需求 
　　很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低， 
	有些场合对写一致性要求并不高。允许实现最终一致性。

数据库的写实时性和读实时性需求
　　对关系数据库来说，插入一条数据之后立刻查询，
	是肯定可以读出来这条数据的，但是对于很多web应用来说，
	并不要求这么高的实时性，
	比方说发一条消息之后，过几秒乃至十几秒之后，
	我的订阅者才看到这条动态是完全可以接受的。

对复杂的SQL查询，特别是多表关联查询的需求 
　　任何大数据量的web系统，都非常忌讳多个大表的关联查询，
    以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，
    从需求以及产品设计角 度，就避免了这种情况的产生。
    往往更多的只是单表的主键查询，以及单表的简单条件分页查询，
    SQL的功能被极大的弱化了。



BASE其实是下面三个术语的缩写：

    基本可用（Basically Available）

    软状态（Soft state）

    最终一致（Eventually consistent）

它的思想是通过让系统放松对某一时刻数据一致性的要求
	来换取系统整体伸缩性和性能上改观。
	为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，
	不可能采用分布式事务来完成这些指标，要想获得这些指标，
	我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法




